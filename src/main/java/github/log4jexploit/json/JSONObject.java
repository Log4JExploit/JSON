package github.log4jexploit.json;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class JSONObject extends HashMap<String, Object> implements JSONAble {


    public JSONObject() {

    }

    public JSONObject(Map<String, Object> copy) {
        this.putAll(copy);
    }

    public JSONObject(String key, Object value) {
        this.put(key, value);
    }


    public long getLong(String key) {
        if(get(key) instanceof BigInteger bigInteger) {
            return bigInteger.longValue();
        }
        return (long) get(key);
    }

    public double getDouble(String key) {
        if(get(key) instanceof BigDecimal bigDecimal) {
            return bigDecimal.doubleValue();
        }
        return (double) get(key);
    }

    public float getFloat(String key) {
        if(get(key) instanceof BigDecimal bigDecimal) {
            return bigDecimal.floatValue();
        }
        return (float) get(key);
    }

    public String getString(String key) {
        return (String) get(key);
    }

    public boolean getBoolean(String key) {
        return (boolean) get(key);
    }

    public JSONObject getObject(String key) {
        return (JSONObject) get(key);
    }

    public JSONArray getArray(String key) {
        return (JSONArray) get(key);
    }

    @Override
    public String toJSONString() {
        return toJSONString(1);
    }

    @Override
    public String toJSONString(int recursionDepth) {
        if(this.isEmpty()) {
            return "{}";
        }

        StringBuilder buffer = new StringBuilder();
        buffer.append("{");

        for(Entry<String, Object> entry : this.entrySet()) {
            buffer
                    .append("\"")
                    .append(JSONAble.escapeText(entry.getKey()))
                    .append("\": ");

            buffer.append(JSONAble.toValueString(entry.getValue(), recursionDepth));
            buffer.append(", ");
        }

        buffer.delete(buffer.length() - 2, buffer.length());
        buffer.append("}");
        return buffer.toString();
    }

    @Override
    public String toString() {
        return this.toJSONString();
    }

    @Override
    public boolean isArray() {
        return false;
    }

    @Override
    public boolean isObject() {
        return true;
    }

    @Override
    public JSONArray asArray() {
        return null;
    }

    @Override
    public JSONObject asObject() {
        return this;
    }
}