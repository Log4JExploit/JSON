package github.log4jexploit.json;

import github.log4jexploit.json.exceptions.EndReachedException;
import github.log4jexploit.json.exceptions.JSONParseException;

import java.util.Map;

public class JSON {

    /**
     * This method will clone the tree structure of the given {@link JSONAble} object. It
     * will however NOT deep clone non-json objects. <br><br>
     * e.g.<br><code>
     * JSONObject object1 = new JSONObject();<br>
     * object1.put("key1", new Object());<br>
     * object1.put("key2", new JSONObject());<br>
     * JSONObject object2 = JSON.shallowClone(object1);<br><br></code>
     * object2.get("key1") <b>==</b> object1.get("key1")<br>
     * object2.get("key2") <b>!=</b> object1.get("key2")<br>
     * @param any the {@link JSONAble} object to clone
     * @return a new instance of the given {@link JSONAble} object
     */
    public static JSONAble shallowClone(JSONAble any) {
        return any instanceof JSONObject ?
                shallowCloneObject((JSONObject) any) :
                shallowCloneArray((JSONArray) any);
    }

    private static JSONObject shallowCloneObject(JSONObject object) {
        JSONObject clone = new JSONObject();
        for(Map.Entry<String, Object> entry : object.entrySet()) {
            if(entry.getValue() instanceof JSONAble) {
                clone.put(entry.getKey(), shallowClone((JSONObject) entry.getValue()));
            } else {
                clone.put(entry.getKey(), entry.getValue());
            }
        }
        return clone;
    }

    private static JSONArray shallowCloneArray(JSONArray array) {
        JSONArray clone = new JSONArray();
        for (Object object : array) {
            if(object instanceof JSONObject jsonObject) {
                clone.add(shallowCloneObject(jsonObject));
            } else if(object instanceof JSONArray jsonArray) {
                clone.add(shallowCloneArray(jsonArray));
            } else {
                clone.add(object);
            }
        }
        return clone;
    }

    /**
     * Parses a text to extract the given {@link JSONObject} or {@link JSONArray}.
     * @param json the json text
     * @return the {@link JSONAble}
     * @throws EndReachedException If the end of stream is encountered unexpectedly
     * @throws JSONParseException  If an unexpected character is encountered
     */
    public static JSONAble fromString(String json) throws EndReachedException, JSONParseException {
        JSONParser parser = new JSONParser(json);
        return parser.parse();
    }

    /**
     * Print a debug message for details on where parsing failed. Only use this for debugging.
     * @param exception the caught exception
     */
    public static void debug(JSONParseException exception) {
        StringBuilder buffer = new StringBuilder();
        exception.getIterator().forEachEncountered(buffer::append);
        System.out.println("=".repeat(buffer.length() - 1)+" v ==");
        System.out.print(buffer);
        System.out.flush();
        System.err.println(exception.getIterator().current());
        System.out.println(exception.getMessage());
        System.out.println("=".repeat(buffer.length()+4));
    }

}
