package test.github.log4jexploit.json;

import github.log4jexploit.json.JSON;
import github.log4jexploit.json.JSONArray;
import github.log4jexploit.json.JSONObject;
import github.log4jexploit.json.exceptions.EndReachedException;
import github.log4jexploit.json.exceptions.JSONParseException;
import org.junit.jupiter.api.Test;

import java.util.concurrent.atomic.AtomicReference;

import static org.junit.jupiter.api.Assertions.*;

public class JSONParserTest {

    @Test
    void testParserEmptyString() {
        String json = "";
        assertThrows(EndReachedException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserEmptyObject() {
        String json = "{}";
        assertDoesNotThrow(() -> JSON.fromString(json));
    }

    @Test
    void testParserRandomSymbol() {
        String json = "{\"key\": d\"value\"}";
        assertThrows(JSONParseException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserMissingClosingBracket() {
        String json = "{\"key\": \"value\"";
        assertThrows(EndReachedException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserMissingValue() {
        String json = "{\"key\": }";
        assertThrows(JSONParseException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserRandomKeyword() {
        String json = "{\"key\": anything}";
        assertThrows(JSONParseException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserSingleQuotes() {
        String json = "{'key': 'value'}";
        assertThrows(JSONParseException.class, () -> JSON.fromString(json));
    }

    @Test
    void testParserUnicode() {
        String json = """
                {
                    "key": "ðŸŒ€",
                }
                """;
        JSONObject object = JSON.fromString(json).asObject();
        assertEquals("ðŸŒ€", object.get("key"));
    }

    @Test
    void testParserCoverAll() {
        String json = """
                {
                    "key": [
                        "Text", 3, {}, []
                    ], "otherkey": {
                        "thirdkey": 3.6345,
                        "fourthkey": null,
                        "truekey": false
                    }
                }
                """;
        AtomicReference<JSONObject> objReference = new AtomicReference<>();
        assertDoesNotThrow(() -> objReference.set(JSON.fromString(json).asObject()));

        JSONObject obj = objReference.get();
        assertTrue(obj.containsKey("key"));

        JSONArray array = obj.getArray("key");
        assertEquals(4, array.size());

        assertTrue(obj.containsKey("otherkey"));
        JSONObject otherkey = obj.getObject("otherkey");

        assertEquals(3.6345, otherkey.getDouble("thirdkey"));
        assertNull(otherkey.get("fourthkey"));
        assertFalse(otherkey.getBoolean("truekey"));
    }
}
